// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ProblemStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubmissionStatus {
  PENDING
  RUNNING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}

model User {
  id            String           @id @default(cuid())
  email         String           @unique
  name          String?
  rating        Int?
  contributions Int?
  problems      Problem[]
  role          UserRole         @default(USER)
  comments      ProblemComment[]
  submissions   Submission[]
  refreshToken  String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Problem {
  id                String             @id @default(cuid())
  title             String
  description       String
  tags              Tag[]
  difficulty        Difficulty         @default(EASY)
  taskDescription   String
  inputDescription  String
  outputDescription String
  status            ProblemStatus      @default(PENDING)
  author            User               @relation(fields: [authorId], references: [id])
  authorId          String
  likeNumber        Int                @default(0)
  submissions       Submission[]
  testcases         Testcase[]
  solution          Solution?
  problemConstrain  ProblemConstraint?
  comments          ProblemComment[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Submission {
  id             String           @id @default(cuid())
  code           String
  language       Language         @relation(fields: [languageId], references: [id])
  languageId     String
  status         SubmissionStatus @default(PENDING)
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  problem        Problem          @relation(fields: [problemId], references: [id])
  problemId      String
  consumedTime   Int?
  consumedMemory Int?
  failedTests    Testcase[]
  submittedAt    DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Testcase {
  id          String       @id @default(cuid())
  input       String
  output      String
  problem     Problem      @relation(fields: [problemId], references: [id])
  problemId   String
  isSample    Boolean      @default(false)
  submissions Submission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Language {
  id          String       @id @default(cuid())
  name        String
  submissions Submission[]
  solutions   Solution[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Solution {
  id         String   @id @default(cuid())
  code       String
  language   Language @relation(fields: [languageId], references: [id])
  languageId String
  problem    Problem  @relation(fields: [problemId], references: [id])
  problemId  String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ProblemConstraint {
  id          String   @id @default(cuid())
  problem     Problem  @relation(fields: [problemId], references: [id])
  problemId   String   @unique
  memoryLimit Int
  timeLimit   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProblemComment {
  id        String           @id @default(cuid())
  content   String
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  problem   Problem          @relation(fields: [problemId], references: [id])
  problemId String
  replyTo   ProblemComment?  @relation("ReplyToRelation", fields: [replyToId], references: [id])
  replyToId String?
  replies   ProblemComment[] @relation("ReplyToRelation")
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  problems  Problem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
